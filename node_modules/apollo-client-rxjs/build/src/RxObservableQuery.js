"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = require('rxjs/Observable');
var observable_1 = require('rxjs/symbol/observable');
var ObservableQueryRef_1 = require('./utils/ObservableQueryRef');
var RxObservableQuery = (function (_super) {
    __extends(RxObservableQuery, _super);
    function RxObservableQuery(apollo, subscribe) {
        _super.call(this, null);
        this.apollo = apollo;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    RxObservableQuery.prototype.lift = function (operator) {
        var observable = new RxObservableQuery(this.apollo);
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    RxObservableQuery.prototype.refetch = function (variables) {
        return this.getObservableQuery().refetch(variables);
    };
    RxObservableQuery.prototype.stopPolling = function () {
        return this.getObservableQuery().stopPolling();
    };
    RxObservableQuery.prototype.startPolling = function (p) {
        return this.getObservableQuery().startPolling(p);
    };
    RxObservableQuery.prototype.fetchMore = function (options) {
        return this.getObservableQuery().fetchMore(options);
    };
    RxObservableQuery.prototype.updateQuery = function (mapFn) {
        this.getObservableQuery().updateQuery(mapFn);
    };
    RxObservableQuery.prototype.subscribeToMore = function (options) {
        return this.getObservableQuery().subscribeToMore(options);
    };
    RxObservableQuery.prototype._subscribe = function (subscriber) {
        if (this.source) {
            return this.source['_subscribe'](subscriber);
        }
        var obs = this.getObservableQuery();
        return obs[observable_1.$$observable]().subscribe(subscriber);
    };
    RxObservableQuery.prototype.getObservableQuery = function () {
        if (this.apollo instanceof ObservableQueryRef_1.ObservableQueryRef) {
            var ref = this.apollo;
            return ref.getRef();
        }
        return this.apollo;
    };
    return RxObservableQuery;
}(Observable_1.Observable));
exports.RxObservableQuery = RxObservableQuery;
//# sourceMappingURL=RxObservableQuery.js.map