"use strict";
var core_1 = require('@angular/core');
var apollo_client_rxjs_1 = require('apollo-client-rxjs');
var Observable_1 = require('rxjs/Observable');
var ApolloQueryObservable_1 = require('./ApolloQueryObservable');
require('rxjs/add/observable/from');
require('rxjs/add/observable/fromPromise');
exports.angularApolloClient = new core_1.OpaqueToken('AngularApolloClient');
function defaultApolloClient(client) {
    return {
        provide: exports.angularApolloClient,
        useValue: client,
    };
}
exports.defaultApolloClient = defaultApolloClient;
var Angular2Apollo = (function () {
    function Angular2Apollo(client) {
        this.client = client;
    }
    Angular2Apollo.prototype.watchQuery = function (options) {
        return new ApolloQueryObservable_1.ApolloQueryObservable(apollo_client_rxjs_1.rxify(this.client.watchQuery)(options));
    };
    Angular2Apollo.prototype.query = function (options) {
        return Observable_1.Observable.fromPromise(this.client.query(options));
    };
    Angular2Apollo.prototype.mutate = function (options) {
        return Observable_1.Observable.fromPromise(this.client.mutate(options));
    };
    Angular2Apollo.prototype.subscribe = function (options) {
        if (typeof this.client.subscribe === 'undefined') {
            throw new Error("Your version of ApolloClient doesn't support subscriptions");
        }
        return Observable_1.Observable.from(this.client.subscribe(options));
    };
    Angular2Apollo.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    Angular2Apollo.ctorParameters = [
        { type: undefined, decorators: [{ type: core_1.Inject, args: [exports.angularApolloClient,] },] },
    ];
    return Angular2Apollo;
}());
exports.Angular2Apollo = Angular2Apollo;
//# sourceMappingURL=Angular2Apollo.js.map