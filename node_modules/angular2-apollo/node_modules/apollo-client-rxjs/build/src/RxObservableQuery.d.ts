import { Observable } from 'rxjs/Observable';
import { Subscriber } from 'rxjs/Subscriber';
import { Subscription } from 'rxjs/Subscription';
import { Operator } from 'rxjs/Operator';
import { ApolloQueryResult, ObservableQuery } from 'apollo-client';
import { ObservableQueryRef } from './utils/ObservableQueryRef';
export declare class RxObservableQuery<T> extends Observable<T> {
    apollo: ObservableQuery | ObservableQueryRef;
    constructor(apollo: ObservableQuery | ObservableQueryRef, subscribe?: <R>(subscriber: Subscriber<R>) => Subscription | Function | void);
    lift<T, R>(operator: Operator<T, R>): Observable<R>;
    refetch(variables?: any): Promise<ApolloQueryResult>;
    stopPolling(): void;
    startPolling(p: number): void;
    fetchMore(options: any): Promise<any>;
    updateQuery(mapFn: any): void;
    subscribeToMore(options: any): () => void;
    _subscribe(subscriber: Subscriber<T>): any;
    private getObservableQuery();
}
